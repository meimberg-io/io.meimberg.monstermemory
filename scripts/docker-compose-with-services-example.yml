# Example docker-compose.prod.yml for apps needing additional services
# Copy this to your app repository and customize as needed

services:
  # Your main application
  $APP_NAME:
    image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
    container_name: $APP_NAME
    ports:
      - "$APP_PORT:8080"
    environment:
      - NODE_ENV=production
      - PORT=8080
      # Database connection
      - DB_HOST=mysql
      - DB_PORT=3306
      - DB_NAME=appdb
      - DB_USER=appuser
      - DB_PASSWORD=apppassword
      # Redis connection
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      # Custom environment variables
      - JWT_SECRET=your-jwt-secret
      - API_KEY=your-api-key
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - $APP_NAME-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # MySQL Database
  mysql:
    image: mysql:8.0
    container_name: ${APP_NAME}-mysql
    environment:
      - MYSQL_ROOT_PASSWORD=rootpassword
      - MYSQL_DATABASE=appdb
      - MYSQL_USER=appuser
      - MYSQL_PASSWORD=apppassword
    volumes:
      - mysql_data:/var/lib/mysql
      - ./mysql-init:/docker-entrypoint-initdb.d  # Optional: SQL init scripts
    restart: unless-stopped
    networks:
      - $APP_NAME-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: ${APP_NAME}-redis
    restart: unless-stopped
    networks:
      - $APP_NAME-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Optional: PostgreSQL (alternative to MySQL)
  # postgres:
  #   image: postgres:15-alpine
  #   container_name: ${APP_NAME}-postgres
  #   environment:
  #     - POSTGRES_DB=appdb
  #     - POSTGRES_USER=appuser
  #     - POSTGRES_PASSWORD=apppassword
  #   volumes:
  #     - postgres_data:/var/lib/postgresql/data
  #     - ./postgres-init:/docker-entrypoint-initdb.d
  #   restart: unless-stopped
  #   networks:
  #     - $APP_NAME-network
  #   healthcheck:
  #     test: ["CMD-SHELL", "pg_isready -U appuser"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 5

  # Optional: MongoDB
  # mongodb:
  #   image: mongo:7
  #   container_name: ${APP_NAME}-mongodb
  #   environment:
  #     - MONGO_INITDB_ROOT_USERNAME=admin
  #     - MONGO_INITDB_ROOT_PASSWORD=adminpassword
  #     - MONGO_INITDB_DATABASE=appdb
  #   volumes:
  #     - mongodb_data:/data/db
  #   restart: unless-stopped
  #   networks:
  #     - $APP_NAME-network

  # Optional: Elasticsearch
  # elasticsearch:
  #   image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
  #   container_name: ${APP_NAME}-elasticsearch
  #   environment:
  #     - discovery.type=single-node
  #     - xpack.security.enabled=false
  #   volumes:
  #     - elasticsearch_data:/usr/share/elasticsearch/data
  #   restart: unless-stopped
  #   networks:
  #     - $APP_NAME-network

volumes:
  mysql_data:
  # postgres_data:
  # mongodb_data:
  # elasticsearch_data:

networks:
  $APP_NAME-network:
    driver: bridge

