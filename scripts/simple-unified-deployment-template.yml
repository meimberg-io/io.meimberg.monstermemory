# Simple unified deployment template - uses existing docker-compose.yml directly
# Copy this file to .github/workflows/deploy-[APP_NAME].yml and customize

name: Deploy [APP_NAME] to Server

on:
  push:
    branches: [ main, master ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  APP_PORT: ${{ vars.APP_PORT || '[APP_PORT]' }}

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run tests
      run: |
        npm run lint
        npm run build
        npm run test:ci

  build-and-deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Deploy to server
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ vars.HOST || secrets.HOST }}
        username: ${{ vars.USERNAME || 'deploy' }}
        key: ${{ secrets.SSH_KEY }}
        script: |
          # Simple unified deployment
          APP_NAME="[APP_NAME]"
          APP_PORT="${{ env.APP_PORT }}"
          APP_DIR="/opt/$APP_NAME"
          
          # Create application directory
          mkdir -p $APP_DIR && cd $APP_DIR
          
          # Create production .env file
          cat > .env << 'EOF'
          NODE_ENV=production
          APP_PORT=$APP_PORT
          DB_NAME=${{ vars.DB_NAME || 'appdb' }}
          DB_USER=${{ vars.DB_USER || 'appuser' }}
          DB_PASSWORD=${{ vars.DB_PASSWORD || 'apppassword' }}
          MYSQL_ROOT_PASSWORD=${{ vars.MYSQL_ROOT_PASSWORD || 'rootpassword' }}
          REDIS_HOST=redis
          REDIS_PORT=6379
          EOF
          
          # Download docker-compose.yml from repository
          curl -o docker-compose.yml https://raw.githubusercontent.com/${{ github.repository }}/main/docker-compose.yml
          
          # Replace placeholders in docker-compose.yml
          sed -i "s/\$APP_NAME/$APP_NAME/g" docker-compose.yml
          sed -i "s/\${{ env.REGISTRY }}/${{ env.REGISTRY }}/g" docker-compose.yml
          sed -i "s/\${{ env.IMAGE_NAME }}/${{ env.IMAGE_NAME }}/g" docker-compose.yml
          
          # Deploy
          echo ${{ secrets.GITHUB_TOKEN }} | docker login ${{ env.REGISTRY }} -u ${{ github.actor }} --password-stdin
          docker-compose pull
          docker-compose down || true
          docker-compose up -d
          docker image prune -f
          
          # Verify
          sleep 30
          if curl -f http://localhost:$APP_PORT/ > /dev/null 2>&1; then
            echo "✅ $APP_NAME deployed successfully on port $APP_PORT!"
            docker-compose ps
          else
            echo "❌ Deployment failed!"
            docker-compose logs --tail=50
            exit 1
          fi

