# Template for deploying any app to your pre-configured server
# Copy this file to .github/workflows/deploy-<app-name>.yml

name: Deploy [APP_NAME] to Server

on:
  push:
    branches: [ main, master ]
    paths:
      - '**[APP_NAME]**/**'  # Only trigger when app-specific files change

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/[APP_NAME]  # Adjust based on your repo structure

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js  # Adjust based on your app's requirements
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run tests
      run: |
        npm run lint
        npm run build
        npm run test:ci

  build-and-deploy:
    needs: test
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./[APP_DIRECTORY]  # Path to your app's Dockerfile
        dockerfile: ./[APP_DIRECTORY]/Dockerfile
        platforms: linux/amd64
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Deploy to server
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.SSH_KEY }}
        script: |
          # App-specific deployment
          APP_NAME="[APP_NAME]"
          APP_PORT="[APP_PORT]"  # e.g., 8202, 8203, etc.
          APP_DIR="/opt/$APP_NAME"
          
          # Create application directory
          mkdir -p $APP_DIR && cd $APP_DIR
          
          # Create docker-compose file
          cat > docker-compose.prod.yml << 'EOF'
          services:
            $APP_NAME:
              image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
              container_name: $APP_NAME
              ports:
                - "$APP_PORT:8080"  # Adjust internal port as needed
              environment:
                - NODE_ENV=production
                - PORT=8080
              restart: unless-stopped
              networks:
                - $APP_NAME-network
              healthcheck:
                test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/"]
                interval: 30s
                timeout: 10s
                retries: 3
                start_period: 40s

          networks:
            $APP_NAME-network:
              driver: bridge
          EOF
          
          # Deploy
          echo ${{ secrets.GITHUB_TOKEN }} | docker login ${{ env.REGISTRY }} -u ${{ github.actor }} --password-stdin
          docker-compose -f docker-compose.prod.yml pull
          docker-compose -f docker-compose.prod.yml down || true
          docker-compose -f docker-compose.prod.yml up -d
          
          # Clean up
          docker image prune -f
          
          # Verify
          sleep 30
          if curl -f http://localhost:$APP_PORT/ > /dev/null 2>&1; then
            echo "✅ $APP_NAME deployed successfully on port $APP_PORT!"
          else
            echo "❌ Deployment failed!"
            exit 1
          fi

